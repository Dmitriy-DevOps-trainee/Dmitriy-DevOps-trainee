Task 1:
1.1.	SSH to remotehost using username and password provided to you in Slack. Log out from remotehost.
login as: Dmitrii_Vlasov
Dmitrii_Vlasov@18.221.144.175's password:
[Dmitrii_Vlasov@ip-172-31-33-155 ~]$ logout

1.2.	Generate new SSH key-pair on your localhost with name "hw-5" (keys should be created in ~/.ssh folder).
[Dima@test /]$ ssh-keygen -f ~/.ssh/hw-5
Generating public/private rsa key pair.
Created directory '/home/Dima/.ssh'.

1.3.	Set up key-based authentication, so that you can SSH to remotehost without password.
[Dima@test /]$ ssh-copy-id -i /home/Dima/.ssh/hw-5 Dmitrii_Vlasov@18.221.144.175
â€¦
Number of key(s) added: 1

1.4.	SSH to remotehost without password. Log out from remotehost.
[Dima@test /]$ ssh Dmitrii_Vlasov@18.221.144.175 -i /home/Dima/.ssh/hw-5
[Dmitrii_Vlasov@ip-172-31-33-155 ~]$ logout
Connection to 18.221.144.175 closed.

1.5.  Create SSH config file, so that you can SSH to remotehost simply running `ssh remotehost` command. As a result, provide output of command `cat ~/.ssh/config`.
[Dima@test .ssh]$ cat /home/Dima/.ssh/config
[Dima@test ~]$ nano .ssh/config
Host remotehost
HostName 18.221.144.175
User Dmitrii_Vlasov
Port 22
IdentityFile ~/.ssh/hw-5
[Dima@test ~]$ ssh remotehost
[Dmitrii_Vlasov@ip-172-31-33-155 ~]$

1.6. Using command line utility (curl or telnet) verify that there are some webserver running on port 80 of webserver.  Notice that webserver has a private network IP, so you can access it only from the same network (when you are on remotehost that runs in the same private network). Log out from remotehost.
[Dmitrii_Vlasov@ip-172-31-33-155 ~]$ curl http://172.31.45.237:80
[Dmitrii_Vlasov@ip-172-31-33-155 ~]$ logout
Connection to 18.221.144.175 closed.

1.7. Using SSH setup port forwarding, so that you can reach webserver from your localhost (choose any free local port you like).
[Dima@test ~]$ ssh -L 9999:172.31.45.237:80 remotehost

1.8  Like in 1.6, but on localhost using command line utility verify that localhost and port you have specified act like webserver, returning same result as in 1.6.
[Dima@test ~]$ curl http://localhost:9999


Task 2:
2.1. Imagine your localhost has been relocated to Havana. Change the time zone on the localhost to Havana and verify the time zone has been changed properly (may be multiple commands).
[Dima@test ~]$ ls -l /etc/localtime
lrwxrwxrwx. 1 root root 35 Nov 27 23:10 /etc/localtime -> ../usr/share/zoneinfo/Europe/Moscow
[Dima@test ~]$ sudo ln -sf /usr/share/zoneinfo/America/Havana /etc/localtime
[Dima@test ~]$ ls -l /etc/localtime
lrwxrwxrwx. 1 root root 34 Dec 19 10:25 /etc/localtime -> /usr/share/zoneinfo/America/Havana

2.2. Find all systemd journal messages on localhost, that were recorded in the last 50 minutes and originate from a system service started with user id 81 (single command).
[Dima@test ~]$ journalctl --since '-50min' _UID=81

2.3. Configure rsyslogd by adding a rule to the newly created configuration file /etc/rsyslog.d/auth-errors.conf to log all security and authentication messages with the priority alert and higher to the /var/log/auth-errors file. Test the newly added log directive with the logger command (multiple commands).
[Dima@test rsyslog.d]$ cd /etc/rsyslog.d
[Dima@test rsyslog.d]$ nano auth-errors.conf
auth.alert /var/log/auth-errors
authpriv.alert /var/log/auth-errors
[Dima@test ~]$ sudo systemctl restart rsyslog
[Dima@test ~]$ logger -p auth.emerg "test 1"
[Dima@test ~]$ logger -p auth.alert "test 2"
[Dima@test ~]$ logger -p auth.crit "test 3"
[Dima@test ~]$ sudo cat /var/log/auth-errors 
Dec 20 14:41:39 test Dima: test 1
Dec 20 14:42:15 test Dima: test 2

